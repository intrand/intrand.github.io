{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intrand \u00b6 I push buttons to make a living. If you're learning how to push buttons, or already do so, I hope you'll find some of my stuff informational or perhaps useful. You will find I focus on containers, specifically. I've done a lot of other things, but that's my primary interest. A Message to Learners \u00b6 You're interested in IT, huh? You want to run some fancy software and play with things, but aren't sure where to start? I highly recommend getting yourself some extra Intel or AMD machine if at all possible. An old laptop or tower would be exceptionally overpowered for learning purposes. If those aren't options, you could attempt to run a virtual machine on your laptop or desktop. As a last resort, you could use a latest-generation Raspberry Pi as a cheap way to expose yourself to managing Linux systems. Unfortunately, not all software is readily available in arm64 flavor, so this option is somewhat limiting, depending on what exactly you want to use/learn. tl;dr : You don't need a beastly rackmount server chassis with multiple CPU sockets and 512GB of ECC RAM to understand how systems work. Keep it simple. Once you have a spare machine (virtual or physical) to play around with, I highly recommend using Ubuntu or CentOS Stream as your operating system, since those are the same or similar to what most companies use. From then on, it's totally up to you! If containers are your thing, I recommend installing k3s or k3d and going ham. Projects \u00b6 You can check out my repos on github for a complete list of open source projects. I'm primarily interested in... wg-meshify : A wireguard configuration generator duplicity-backup : Automated, headless duplicity backups rsync : rsync reciever for duplicity-backup , or any SCP client ansible : ansible-playbook inside a container Non-technical \u00b6 The great outdoors is nice. I try to spend as much time out in it as possible. You'll quite often find me near lakes and trails. Other times you'll find me building or fixing things.","title":"Home"},{"location":"#intrand","text":"I push buttons to make a living. If you're learning how to push buttons, or already do so, I hope you'll find some of my stuff informational or perhaps useful. You will find I focus on containers, specifically. I've done a lot of other things, but that's my primary interest.","title":"Intrand"},{"location":"#a-message-to-learners","text":"You're interested in IT, huh? You want to run some fancy software and play with things, but aren't sure where to start? I highly recommend getting yourself some extra Intel or AMD machine if at all possible. An old laptop or tower would be exceptionally overpowered for learning purposes. If those aren't options, you could attempt to run a virtual machine on your laptop or desktop. As a last resort, you could use a latest-generation Raspberry Pi as a cheap way to expose yourself to managing Linux systems. Unfortunately, not all software is readily available in arm64 flavor, so this option is somewhat limiting, depending on what exactly you want to use/learn. tl;dr : You don't need a beastly rackmount server chassis with multiple CPU sockets and 512GB of ECC RAM to understand how systems work. Keep it simple. Once you have a spare machine (virtual or physical) to play around with, I highly recommend using Ubuntu or CentOS Stream as your operating system, since those are the same or similar to what most companies use. From then on, it's totally up to you! If containers are your thing, I recommend installing k3s or k3d and going ham.","title":"A Message to Learners"},{"location":"#projects","text":"You can check out my repos on github for a complete list of open source projects. I'm primarily interested in... wg-meshify : A wireguard configuration generator duplicity-backup : Automated, headless duplicity backups rsync : rsync reciever for duplicity-backup , or any SCP client ansible : ansible-playbook inside a container","title":"Projects"},{"location":"#non-technical","text":"The great outdoors is nice. I try to spend as much time out in it as possible. You'll quite often find me near lakes and trails. Other times you'll find me building or fixing things.","title":"Non-technical"},{"location":"CV/","text":"","title":"CV"},{"location":"Projects/about/","text":"about \u00b6 A project called about that backed the main page of my domain . Design \u00b6 about consisted of two components: db : A Mongo database that stored information I'd like to display, like random trivia about myself web : A web front-end that retrieved data from the database on the server-side, then generated a page for the user to see Status \u00b6 Offline. I just don't have time to maintain the project anymore.","title":"about"},{"location":"Projects/about/#about","text":"A project called about that backed the main page of my domain .","title":"about"},{"location":"Projects/about/#design","text":"about consisted of two components: db : A Mongo database that stored information I'd like to display, like random trivia about myself web : A web front-end that retrieved data from the database on the server-side, then generated a page for the user to see","title":"Design"},{"location":"Projects/about/#status","text":"Offline. I just don't have time to maintain the project anymore.","title":"Status"},{"location":"Projects/discord-bot/","text":"discord-bot \u00b6 A general-purpose discord bot that contained the features I cared about in a single bot (vs many external projects). Design \u00b6 A package of python modules to talk to APIs and do general discord bot stuff. Fatal flaw \u00b6 There are already a bajillion other general purpose bots out there and I'm only one person. Conclusion \u00b6 I stopped using bots. But, if I were going to, I'd just pick an existing bot or two instead of writing my own.","title":"discord-bot"},{"location":"Projects/discord-bot/#discord-bot","text":"A general-purpose discord bot that contained the features I cared about in a single bot (vs many external projects).","title":"discord-bot"},{"location":"Projects/discord-bot/#design","text":"A package of python modules to talk to APIs and do general discord bot stuff.","title":"Design"},{"location":"Projects/discord-bot/#fatal-flaw","text":"There are already a bajillion other general purpose bots out there and I'm only one person.","title":"Fatal flaw"},{"location":"Projects/discord-bot/#conclusion","text":"I stopped using bots. But, if I were going to, I'd just pick an existing bot or two instead of writing my own.","title":"Conclusion"},{"location":"Projects/idle/","text":"idle \u00b6 idle is my first online, zero-player game. Previously, I hosted this myself and you could play it at idle.intrand.io , but that's no longer true. Design \u00b6 Mongo Database <---> API server <---> client, engine, discord-bot <---> \"players\" This was akin to twitch.tv \"channel points\" in that the player passively accumulated \"progress\" (levels, stats, items, etc) by simply being logged in to a discord server alongside the bot. Status \u00b6 Back burner project. Once in a blue moon I'll update it and make some progress, but this is now closed-source due to relative inactivity.","title":"idle"},{"location":"Projects/idle/#idle","text":"idle is my first online, zero-player game. Previously, I hosted this myself and you could play it at idle.intrand.io , but that's no longer true.","title":"idle"},{"location":"Projects/idle/#design","text":"Mongo Database <---> API server <---> client, engine, discord-bot <---> \"players\" This was akin to twitch.tv \"channel points\" in that the player passively accumulated \"progress\" (levels, stats, items, etc) by simply being logged in to a discord server alongside the bot.","title":"Design"},{"location":"Projects/idle/#status","text":"Back burner project. Once in a blue moon I'll update it and make some progress, but this is now closed-source due to relative inactivity.","title":"Status"},{"location":"Projects/initVm/","text":"initVm \u00b6 initVm was a portfolio project to show I understood how to automate every layer of infrastructure. Design \u00b6 The number of components in initVm was staggering, including: web : Allowed users to submit order(s) and view status(es) api : The gatekeeper for orders, statuses, cancellations, etc dnsmasq : An installation of dnsmasq that got its configuration from a git repo dnsmasq-api : A custom python module which wrapped dnsmasq in an API that was safe to use passbolt : Secrets storage with a RESTful API phpipam : Web app to manage IP address usage/reservations within various subnets and vlans vmware : vmware esxi & vcenter to host virtual machine deployments ansible : rabbitmq : The celery message queue system of choice celery : Utilized runners to generate an ansible inventory, then ran ansible-playbook roles against the relevant target(s) for every aspect of infrastructure discord-alert : Custom python module which was used by other components to send discord webhooks as the deployment process progressed passbolt (client): Custom python module which retrieved secrets needed to authenticate to other resources (eg, vcenter) from passbolt phpipam (client): Custom python module which found the next available IP address in a subnet by vlan ID, or removed an exact match if deleting a deployment, in phpipam dnsmasq (client): Custom python module which provisioned/removed dnsmasq DNS records corresponding to the deployment by calling a custom python module which spoke to the custom dnsmasq wrapper API Fatal flaws \u00b6 Obviously such a huge stack of software is incredibly difficult for a single person to maintain. This was known before I started, but still is the reason none of it is maintained anymore. Conclusion \u00b6 Well worth the effort. I was able to use this stack to show that I knew what I was doing on some level. Keep in mind that a lot of the choices were \"of their time\" and limited by what I knew at the time. Golang was still brand new, and I hadn't used Hashicorp vault much. If I had to do this over again, I would break things up more and use different projects/products. The process could also be simplified slightly. Still, worth it in the end!","title":"initVm"},{"location":"Projects/initVm/#initvm","text":"initVm was a portfolio project to show I understood how to automate every layer of infrastructure.","title":"initVm"},{"location":"Projects/initVm/#design","text":"The number of components in initVm was staggering, including: web : Allowed users to submit order(s) and view status(es) api : The gatekeeper for orders, statuses, cancellations, etc dnsmasq : An installation of dnsmasq that got its configuration from a git repo dnsmasq-api : A custom python module which wrapped dnsmasq in an API that was safe to use passbolt : Secrets storage with a RESTful API phpipam : Web app to manage IP address usage/reservations within various subnets and vlans vmware : vmware esxi & vcenter to host virtual machine deployments ansible : rabbitmq : The celery message queue system of choice celery : Utilized runners to generate an ansible inventory, then ran ansible-playbook roles against the relevant target(s) for every aspect of infrastructure discord-alert : Custom python module which was used by other components to send discord webhooks as the deployment process progressed passbolt (client): Custom python module which retrieved secrets needed to authenticate to other resources (eg, vcenter) from passbolt phpipam (client): Custom python module which found the next available IP address in a subnet by vlan ID, or removed an exact match if deleting a deployment, in phpipam dnsmasq (client): Custom python module which provisioned/removed dnsmasq DNS records corresponding to the deployment by calling a custom python module which spoke to the custom dnsmasq wrapper API","title":"Design"},{"location":"Projects/initVm/#fatal-flaws","text":"Obviously such a huge stack of software is incredibly difficult for a single person to maintain. This was known before I started, but still is the reason none of it is maintained anymore.","title":"Fatal flaws"},{"location":"Projects/initVm/#conclusion","text":"Well worth the effort. I was able to use this stack to show that I knew what I was doing on some level. Keep in mind that a lot of the choices were \"of their time\" and limited by what I knew at the time. Golang was still brand new, and I hadn't used Hashicorp vault much. If I had to do this over again, I would break things up more and use different projects/products. The process could also be simplified slightly. Still, worth it in the end!","title":"Conclusion"},{"location":"Projects/logger/","text":"logger \u00b6 logger is a simple RESTful API that will reflect and log whatever is sent to it, even garbage. It is intentionally not safe for production use. Design \u00b6 I needed a service that could accept any payload at any route and display it in some way. Sometimes appliances or even internal tools don't provide samples of JSON request/response bodies and it's quicker to configure the tool to point to something that can dump it to stdout than it is to debug custom client code. logger is just a simple, single-file python flask service that runs inside of a docker container. Status \u00b6 It's useful from time to time and doesn't require much maintenance, especially thanks to docker creating a reproducible environment.","title":"logger"},{"location":"Projects/logger/#logger","text":"logger is a simple RESTful API that will reflect and log whatever is sent to it, even garbage. It is intentionally not safe for production use.","title":"logger"},{"location":"Projects/logger/#design","text":"I needed a service that could accept any payload at any route and display it in some way. Sometimes appliances or even internal tools don't provide samples of JSON request/response bodies and it's quicker to configure the tool to point to something that can dump it to stdout than it is to debug custom client code. logger is just a simple, single-file python flask service that runs inside of a docker container.","title":"Design"},{"location":"Projects/logger/#status","text":"It's useful from time to time and doesn't require much maintenance, especially thanks to docker creating a reproducible environment.","title":"Status"},{"location":"Projects/openvpn/","text":"openvpn \u00b6 openvpn was a project that ran the upstream openvpn project inside a container. Design \u00b6 Stuff openvpn into a container so I can version control it outside of the host operating system. Status \u00b6 Abandoned. I don't use OpenVPN anymore, so I don't maintain the project anymore. Ultimately it's just a simple Dockerfile, so it would probably work if I tried to use it again.","title":"openvpn"},{"location":"Projects/openvpn/#openvpn","text":"openvpn was a project that ran the upstream openvpn project inside a container.","title":"openvpn"},{"location":"Projects/openvpn/#design","text":"Stuff openvpn into a container so I can version control it outside of the host operating system.","title":"Design"},{"location":"Projects/openvpn/#status","text":"Abandoned. I don't use OpenVPN anymore, so I don't maintain the project anymore. Ultimately it's just a simple Dockerfile, so it would probably work if I tried to use it again.","title":"Status"},{"location":"Projects/relay-webhook/","text":"relay-webhook \u00b6 relay-webhook was a service to receive a webhook and push it to another place, often changing the structure. It started as a way to transform and forward docker hub automated build webhooks to discord webhooks so I could get updates inside discord every time an automated build finished. Design \u00b6 relay-webhook acted like a filtering proxy between the public Internet and my own services. It was a simple program that listened for web requests, looked at a config file and decided where to send it. The relay-webhook service ran in my kubernetes cluster behind an ingress controller. Status \u00b6 Abandoned. I stopped using everything that used to send webhooks to relay-webhook , so there's no point in maintaining it anymore.","title":"relay-webhook"},{"location":"Projects/relay-webhook/#relay-webhook","text":"relay-webhook was a service to receive a webhook and push it to another place, often changing the structure. It started as a way to transform and forward docker hub automated build webhooks to discord webhooks so I could get updates inside discord every time an automated build finished.","title":"relay-webhook"},{"location":"Projects/relay-webhook/#design","text":"relay-webhook acted like a filtering proxy between the public Internet and my own services. It was a simple program that listened for web requests, looked at a config file and decided where to send it. The relay-webhook service ran in my kubernetes cluster behind an ingress controller.","title":"Design"},{"location":"Projects/relay-webhook/#status","text":"Abandoned. I stopped using everything that used to send webhooks to relay-webhook , so there's no point in maintaining it anymore.","title":"Status"},{"location":"Projects/storytime/","text":"storytime \u00b6 storytime was an attempt at recreating an experience as a child using discord instead of a room full of kids/people. Rules The activity works like so... Someone has a sheet of lined paper and writes a single word to start a story. That person then passes the paper to the person next to them. The recipient then writes the next word in the sentence/story. The paper is again passed to the next person and the process repeats until the story is complete. Design \u00b6 storytime was comprised of three parts: db : A Mongo database that stored all of the stories metadata related to each entry within a story. api : An API server that handled all of the requests to/from the database. discord : A discord bot which joined servers and listened for new messages in a configured channel id for that server (also configured by id). It was the gatekeeper / main interface to the API server. web : A web server that used template-driven page generation to take data from the API server and make a clean, readable web page. Users would type their message into the designated discord channel and the bot would react to tell you if the message was accepted or not. discord bot reactions = message was accepted and recorded = message was too long, contained something really nasty (html, etc), or there was some kind of error on the back-end = unknown status; check your story on the site and perhaps try again, depending on whether or not it made it in Fatal flaws \u00b6 There's one obvious flaw to making a bot, website and database to record, show and store stories, respectively: you can just do this using discord natively. All it takes is agreement from the community to follow the rules of telling a story together. storytime discord Easy to write stories Easy to read stories Persistent Avoided clutter Low maintenance Secure It was frustrating to go between a webpage to read the story, and discord to write the story. These shouldn't have been separate. See the conclusion for more thoughts on this. Conclusion \u00b6 Building a set of services around using discord wasn't the right design choice for this project. I think this would work far better as a web-only service that people could sign up for using their discord, google, github or whatever identity provider(s) they wanted.","title":"storytime"},{"location":"Projects/storytime/#storytime","text":"storytime was an attempt at recreating an experience as a child using discord instead of a room full of kids/people. Rules The activity works like so... Someone has a sheet of lined paper and writes a single word to start a story. That person then passes the paper to the person next to them. The recipient then writes the next word in the sentence/story. The paper is again passed to the next person and the process repeats until the story is complete.","title":"storytime"},{"location":"Projects/storytime/#design","text":"storytime was comprised of three parts: db : A Mongo database that stored all of the stories metadata related to each entry within a story. api : An API server that handled all of the requests to/from the database. discord : A discord bot which joined servers and listened for new messages in a configured channel id for that server (also configured by id). It was the gatekeeper / main interface to the API server. web : A web server that used template-driven page generation to take data from the API server and make a clean, readable web page. Users would type their message into the designated discord channel and the bot would react to tell you if the message was accepted or not. discord bot reactions = message was accepted and recorded = message was too long, contained something really nasty (html, etc), or there was some kind of error on the back-end = unknown status; check your story on the site and perhaps try again, depending on whether or not it made it in","title":"Design"},{"location":"Projects/storytime/#fatal-flaws","text":"There's one obvious flaw to making a bot, website and database to record, show and store stories, respectively: you can just do this using discord natively. All it takes is agreement from the community to follow the rules of telling a story together. storytime discord Easy to write stories Easy to read stories Persistent Avoided clutter Low maintenance Secure It was frustrating to go between a webpage to read the story, and discord to write the story. These shouldn't have been separate. See the conclusion for more thoughts on this.","title":"Fatal flaws"},{"location":"Projects/storytime/#conclusion","text":"Building a set of services around using discord wasn't the right design choice for this project. I think this would work far better as a web-only service that people could sign up for using their discord, google, github or whatever identity provider(s) they wanted.","title":"Conclusion"},{"location":"Projects/x11/","text":"x11 \u00b6 Run an X11 display inside of a container. I had a small server plugged into a stereo, which was then plugged into a TV and built x11 to see if we could use the small server for watching movies. Design \u00b6 I attempted to pack as much of the display-related software and configuration as possible into a container image. This kept the server host operating system squeaky clean while the \"display junk\" was inside of a container. Ultimately, this is just a Dockerfile. Fatal flaw \u00b6 Drivers, libraries, container privileges, etc. made this a pain to maintain. Conclusion \u00b6 Never again. Buy a 'stick' or set-top box product instead.","title":"x11"},{"location":"Projects/x11/#x11","text":"Run an X11 display inside of a container. I had a small server plugged into a stereo, which was then plugged into a TV and built x11 to see if we could use the small server for watching movies.","title":"x11"},{"location":"Projects/x11/#design","text":"I attempted to pack as much of the display-related software and configuration as possible into a container image. This kept the server host operating system squeaky clean while the \"display junk\" was inside of a container. Ultimately, this is just a Dockerfile.","title":"Design"},{"location":"Projects/x11/#fatal-flaw","text":"Drivers, libraries, container privileges, etc. made this a pain to maintain.","title":"Fatal flaw"},{"location":"Projects/x11/#conclusion","text":"Never again. Buy a 'stick' or set-top box product instead.","title":"Conclusion"}]}